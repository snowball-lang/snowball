import Core::System;

namespace tests {

@test(expect = 5)
func simple_return() i32 {
    return 5;
}

@test
func if_statement() i32 {
    let a = 1;
    if a == 1 {
        return a;
    }

    return 0;
}

@test
func if_else_statement() i32 {
    let a = 1;
    if a == 2 {
        return a;
    } else {
        return 1;
    }
}

@test
func if_else_if_statement() i32 {
    let a = 1;
    if a == 2 {
        return a;
    } else if a == 1 {
        return 1;
    } else {
        return 0;
    }
}

@test(expect = 10)
func while_statement() i32 {
    let mut a = 1;
    while a < 10 {
        a = a + 1;
    }

    return a;
}

@test(expect = 10)
func do_while_statement() i32 {
    let mut a = 1;
    do {
        a = a + 1;
    } while a < 10;

    return a;
}

@test(expect = 10)
func add() i32 {
    return 5 + 5;
}

@test(expect = 0)
func sub() i32 {
    return 5 - 5;
}

@test(expect = 25)
func mul() i32 {
    return 5 * 5;
}

@test(expect = 1)
func div() i32 {
    return 5 / 5;
}

@test(expect = 0)
func mod() i32 {
    return 5 % 5;
}

@test(expect = 1)
func and() i32 {
    return 1 && 1;
}

@test(expect = 1)
func or() i32 {
    return 1 || 1;
}

@test(expect = 1)
func xor() i32 {
    return 1 ^ 0;
}

@test(expect = 0)
func not() i32 {
    return !1;
}

@test(expect = 1)
func eq() i32 {
    return 1 == 1;
}

@test(expect = 0)
func neq() i32 {
    return 1 != 1;
}

@test(expect = 1)
func gt() i32 {
    return 2 > 1;
}

@test(expect = 1)
func lt() i32 {
    return 1 < 2;
}

@test(expect = 1)
func gte() i32 {
    return 2 >= 1;
}

@test(expect = 1)
func lte() i32 {
    return 1 <= 2;
}

@test(expect = 2)
func lshift() i32 {
    return 1 << 1;
}

@test(expect = 1, skip)
func rshift() i32 {
    return 2 >> 1;
}

@test(expect = 10)
func range_loop() i32 {
    let mut a = 0;
    for i in 0..10 {
        a = a + 1;
    }

    return a;
}

@test
func try_catch() i32 {
    try {
        throw new Exception("test");
    } catch(e: Exception) {
        return e.what() == "test";
    }

    return false;
}

@test
func complex_eq() i32 {
    let a = 1;
    let b = 2;
    return a == b || a == 1;
}

@test(expect = 7)
func complex_math() i32 {
    let a = 1;
    let b = 2;
    let c = 3;
    let d = 4;
    let e = 5;
    return a + b * c - d / e;
}

}
