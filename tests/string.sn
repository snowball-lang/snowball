import std::io;
@use_macros
import std::asserts;

namespace tests {

@test
func empty() i32 {
    let s = new String();
    return s.size() == 0;
}

@test(expect = 5)
func size_char() i32 {
    let s = String::from(b"hello", 5);
    return s.size();
}

@test
func equals() i32 {
    let s = "hello";
    return s == "hello";
}

@test
func not_equals() i32 {
    let s = "hello"
    return s != "world";
}

@test
func concat() i32 {
    let mut s = "hello";
    s = s + " world";
    return s == "hello world";
}

@test(expect = 5)
func size() i32 {
    let s = "hello";
    return s.size();
}

@test()
func index() i32 {
    let mut s = "hello";
    return s[0] == 'h' && s[1] == 'e' && s[2] == 'l' && s[3] == 'l' && s[4] == 'o';
}

@test()
func substring() i32 {
    let s = "hello";
    return s.substr(0..2) == "he";
}

@test()
func substring_negative() i32 {
    let s = "hello";
    return s.substr((-2)..(-1)) == "l";
}

@test()
func rjust() i32 {
    let s = "hello";
    return s.rjust(10, ' ') == "     hello";
}

@test()
func ljust() i32 {
    let s = "hello";
    return s.ljust(10, '-') == "hello-----";
}

@test(expect = 2)
func split() i32 {
    let s = "hello world";
    let x = s.split(" ");
    assert!(x[0] == "hello");
    assert!(x[1] == "world");
    return x.size();
}

@test(expect = 4)
func split_2() i32 {
    let s = "hello world foo bar";
    let x = s.split(" ");
    assert!(x[0] == "hello");
    assert!(x[1] == "world");
    assert!(x[2] == "foo");
    assert!(x[3] == "bar");
    return x.size();
}

@test
func starts_with() i32 {
    let s = "hello world";
    return s.starts_with("hello");
}

@test(expect = 0)
func starts_with_big() i32 {
    let s = "hello world";
    return s.starts_with("hello world hello");
}

@test
func ends_with() i32 {
    let s = "hello world";
    return s.ends_with("world");
}

@test(expect = 0)
func ends_with_big() i32 {
    let s = "hello world";
    return s.ends_with("hello world hello");
}

@test
func erase() i32 {
    let mut s = "hello world";
    s.erase(5, 5);
    return s == "hello";
}

}
