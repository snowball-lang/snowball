
using std::main::(printf, test);

public interface Lol<D> {
  public operator func +(x: D);
}

public final class Hello<T> implements Lol<T>, ToString, Clone<Self> {
  public let mut a: T;

  init(x: T) {
    self.a = x;
  }

  public func hello(x: Self) {
  }

  public virtual func to_string() String {
  }
  
  public virtual operator func +(_y: T) {
  }
}

public func test2(x: Hello<i32>) Hello<i32> {
  //balls(x);
  //x.hello(x);
  let mut a;
  a = 24 * 24 - 2;
  //x + 25;
  x
}

#[no_mangle]
public func balls<B: ToString>(x: B) i32 {
  2
}

public func main() i32 {
  let mut a: i64;
  let mut b;
  let mut v: i32 = 25;
  a = 24L;
  b = &a;
  test(a);
  printf(c"Hello, world!\n");
  test2(new Hello<i32>(25));
}