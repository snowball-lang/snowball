import Core::Math;
import Core::System;
@use_macro
import Core::Assert;

namespace test {

func linear_search(arr: Vector<i32>, x: i32) i32 {
    let n = arr.size();
    for i in 0..n {
        if arr[i] == x {
            return i;
        }
    }
    return -1;
}

@bench
func linear_search() {
    // let's make it huge
    let mut arr = new Vector<i32>();
    for i in 0..100000000 {
        arr.push(i);
    }
    let x = 999999;
    let result = linear_search(arr, x);
    @assert(result == x);
}

@test(expect = 3)
func linear_search() i32 {
    let mut arr = new Vector<i32>();
    arr.push(2);
    arr.push(3);
    arr.push(4);
    arr.push(10);
    let x = 10;
    let result = linear_search(arr, x);
    return result;
}

func ternary_search(arr: Vector<i32>, l: i32, r: i32, x: i32) i32 {
    if (r >= l) {
        let mid1 = l + (r - l) / 3;
        let mid2 = r - (r - l) / 3;
        if (arr[mid1] == x) {
            return mid1;
        }
        if (arr[mid2] == x) {
            return mid2;
        }
        if (x < arr[mid1]) {
            return ternary_search(arr, l, mid1 - 1, x);
        } else if (x > arr[mid2]) {
            return ternary_search(arr, mid2 + 1, r, x);
        } else {
            return ternary_search(arr, mid1 + 1, mid2 - 1, x);
        }
    }
    return -1;
}

@bench
func ternary_search() {
    // let's make it huge
    let mut arr = new Vector<i32>();
    for i in 0..10000000 {
        arr.push(i);
    }
    let x = 999999;
    let result = ternary_search(arr, 0, arr.size() - 1, x);
    @assert(result == x);
}

@test(expect = 3)
func ternary_search() i32 {
    let mut arr = new Vector<i32>();
    arr.push(2);
    arr.push(3);
    arr.push(4);
    arr.push(10);
    let x = 10;
    let result = ternary_search(arr, 0, arr.size() - 1, x);
    return result;
}

func binary_search(arr: Vector<i32>, l: i32, r: i32, x: i32) i32 {
    if (r >= l) {
        let mid = l + (r - l) / 2;
        if (arr[mid] == x) {
            return mid;
        }
        if (arr[mid] > x) {
            return binary_search(arr, l, mid - 1, x);
        }
        return binary_search(arr, mid + 1, r, x);
    }
    return -1;
}

@bench
func binary_search() {
    // let's make it huge
    let mut arr = new Vector<i32>();
    for i in 0..10000000 {
        arr.push(i);
    }
    let x = 999999;
    let result = binary_search(arr, 0, arr.size() - 1, x);
    @assert(result == x);
}

@test(expect = 3)
func binary_search() i32 {
    let mut arr = new Vector<i32>();
    arr.push(2);
    arr.push(3);
    arr.push(4);
    arr.push(10);
    let x = 10;
    let result = binary_search(arr, 0, arr.size() - 1, x);
    return result;
}

func jump_search(arr: Vector<i32>, x: i32) i32 {
    let n = arr.size();
    let mut step = Math::sqrt(n);
    let mut prev = 0;
    while (arr[Math::min(step, n) - 1] < x) {
        prev = step;
        step = step + Math::sqrt(n);
        if (prev >= n) {
            return -1;
        }
    }
    while (arr[prev] < x) {
        prev = prev + 1;
        if (prev == Math::min(step, n)) {
            return -1;
        }
    }
    if (arr[prev] == x) {
        return prev;
    }
    return -1;
}

@bench
func jump_search() {
    // let's make it huge
    let mut arr = new Vector<i32>();
    for i in 0..10000000 {
        arr.push(i);
    }
    let x = 999999;
    let result = jump_search(arr, x);
    @assert(result == x);
}

@test(expect = 3)
func jump_search() i32 {
    let mut arr = new Vector<i32>();
    arr.push(2);
    arr.push(3);
    arr.push(4);
    arr.push(10);
    let x = 10;
    let result = jump_search(arr, x);
    return result;
}

func interpolation_search(arr: Vector<i32>, lo: i32, hi: i32, x: i32) i32 {
    let n = arr.size();
    if (lo <= hi && x >= arr[lo] && x <= *arr[hi]) {
        let pos = lo + (((hi - lo) as f32 / (arr[hi] - arr[lo]) as f32) * (x - arr[lo])) as i32;
        if (arr[pos] == x) {
            return pos;
        }
        if (arr[pos] < x) {
            return interpolation_search(arr, pos + 1, hi, x);
        }
        if (arr[pos] > x) {
            return interpolation_search(arr, lo, pos - 1, x);
        }
    }
    return -1;
}

//func [[bench]] interpolation_search() {
//    // let's make it huge
//    let mut arr = new Vector<i32>{};
//    for i in 0..10000000 {
//        arr.push(i);
//    }
//    let x = 999999;
//    let result = interpolation_search(arr, 0, arr.size() - 1, x);
//    @assert(result == x);
//}

@test(expect = 3)
func interpolation_search() i32 {
    let mut arr = new Vector<i32>();
    arr.push(2);
    arr.push(3);
    arr.push(4);
    arr.push(10);
    let x = 10;
    let result = interpolation_search(arr, 0, arr.size() - 1, x);
    return result;
}

func bubble_sort(mut arr: Vector<i32>) Vector<i32> {
    let n = arr.size();
    for i in 0..n {
        for j in 0..n - i - 1 {
            if (arr[j] > arr[j + 1]) {
                let temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    return arr;
}

//func [[bench]] bubble_sort() {
//    // let's make it huge
//    let mut arr = new Vector<i32>{};
//    for i in 0..10000000 {
//        arr.push(i);
//    }
//    let result = bubble_sort(arr);
//    @assert(result[0] == 0);
//}

@test
func bubble_sort() i32 {
    let mut arr = new Vector<i32>();
    arr.push(2);
    arr.push(3);
    arr.push(4);
    arr.push(10);
    let result = bubble_sort(arr);

    for i in 0..result.size() - 1 {
        if (result[i] > result[i + 1]) {
            return false;
        }
    }

    return true;
}

}
