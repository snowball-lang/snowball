import Core::Tuples;

namespace tests {

@test(expect = 3)
public func pair() i32 {
    let x = new Tuples::Pair<i32, i32>(1, 2);
    return x.first + x.second;
}

@test(expect = 3)
public func pair_from_make() i32 {
    let x = Tuples::make_pair(1, 2);
    return x.first + x.second;
}

@test(expect = 2)
public func pair_with_class() i32 {
    let x = new Tuples::Pair<i32, String>(1, "2");
    return x.first + x.second.size();
}

@test(expect = 3)
public func pair_with_ptr() i32 {
    let x = new Tuples::Pair<i32, &i32>(1, &2);
    return x.first + *x.second;
}

@test(expect = 6)
public func triple() i32 {
    let x = new Tuples::Triple<i32, i32, i32>(1, 2, 3);
    return x.first + x.second + x.third;
}

@test(expect = 6)
public func triple_from_make() i32 {
    let x = Tuples::make_triple(1, 2, 3);
    return x.first + x.second + x.third;
}

@test(expect = 2) 
public func pair_with_vector() i32 {
    let x = new Tuples::Pair<Vector<i32>, i32>(new Vector<i32>(), 1);
    x.first.push_back(1);
    return x.first.size() + x.second;
}

@test(expect = 2) 
public func pair_with_vector2() i32 {
    let x = new Tuples::Pair<i32, Vector<i32>>(1, new Vector<?i32>());
    x.second.push_back(1);
    return x.first + x.second.size();
}

}
