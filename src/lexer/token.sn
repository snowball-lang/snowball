
import pkg::ast::location::{LocationHolder, SourceLocation};

public enum TokenType {
  Identifier(String),
  Integer(i64),
  Float(f64),
  String(String),
  Char(u8),
  Continue,
  Break,
  Return,
  If,
  Else,
  While,
  For,
  Let,
  Mut,
  Struct,
  Enum,
  Class,
  Interface,
  Public,
  Private,
  Import,
  Const,
  Static,
  True,
  False,
  Fn,
  New,
  Super,
  OpenParen,
  CloseParen,
  OpenBrace,
  CloseBrace,
  OpenBracket,
  CloseBracket,
  Semicolon,
  Colon,
  Comma,
  Dot,
  Plus,
  Minus,
  Star,
  Slash,
  Percent,
  Ampersand,
  Pipe,
  At,
  Arrow,
  DoubleColon,
  PlusEqual,
  MinusEqual,
  StarEqual,
  SlashEqual,
  PercentEqual,
  AmpersandEqual,
  PipeEqual,
  Equal,
  DoubleEqual,
  NotEqual,
  LessThan,
  LessThanEqual,
  GreaterThan,
  GreaterThanEqual,
  DoublePlus,
  DoubleMinus,
  DoubleAmpersand,
  DoublePipe,
  DoubleLessThan,
  DoubleGreaterThan,
  DoubleLessThanEqual,
  DoubleGreaterThanEqual,
  Question,
  Exclamation,
  
  EOF
}

class Token extends LocationHolder implements ToString {
    let token_type: TokenType;

  public:
    Token(token_type: TokenType, location: SourceLocation) :
      super(location),
      token_type(token_type)
    {}

    func value() String {
      case self.token_type {
        Identifier(value) => return value,
        Integer(value) => return value.to_string(),
        Float(value) => return value.to_string(),
        String(value) => return "\"" + value + "\"",
        Char(value) => return "'" + value + "'",
        Continue => return "continue",
        Break => return "break",
        Return => return "return",
        If => return "if",
        Else => return "else",
        While => return "while",
        For => return "for",
        Let => return "let",
        Mut => return "mut",
        Struct => return "struct",
        Enum => return "enum",
        Class => return "class",
        Interface => return "interface",
        Public => return "public",
        Private => return "private",
        Import => return "import",
        Const => return "const",
        Static => return "static",
        True => return "true",
        False => return "false",
        Fn => return "fn",
        New => return "new",
        Super => return "super",
        OpenParen => return "(",
        CloseParen => return ")",
        OpenBrace => return "{",
        CloseBrace => return "}",
        OpenBracket => return "[",
        CloseBracket => return "]",
        Semicolon => return ";",
        Colon => return ":",
        Comma => return ",",
        Dot => return ".",
        Plus => return "+",
        Minus => return "-",
        Star => return "*",
        Slash => return "/",
        Percent => return "%",
        Ampersand => return "&",
        Pipe => return "|",
        At => return "@",
        Arrow => return "=>",
        DoubleColon => return "::",
        PlusEqual => return "+=",
        MinusEqual => return "-=",
        StarEqual => return "*=",
        SlashEqual => return "/=",
        PercentEqual => return "%=",
        AmpersandEqual => return "&=",
        PipeEqual => return "|=",
        Equal => return "=",
        DoubleEqual => return "==",
        NotEqual => return "!=",
        LessThan => return "<",
        LessThanEqual => return "<=",
        GreaterThan => return ">",
        GreaterThanEqual => return ">=",
        DoublePlus => return "++",
        DoubleMinus => return "--",
        DoubleAmpersand => return "&&",
        DoublePipe => return "||",
        DoubleLessThan => return "<<",
        DoubleGreaterThan => return ">>",
        DoubleLessThanEqual => return "<<=",
        DoubleGreaterThanEqual => return ">>=",
        Question => return "?",
        Exclamation => return "!",
        EOF => return "EOF"
      }
    }

    func to_string() String {
      let repr = "Token(" + self.value() + ")";
      return repr;
    }
}
