
import pkg::utils::path_holder;
import std::fs::{Path};
import pkg::compiler::global_ctx::{glb_ctx, CachedPath};

public class SourceLocation extends path_holder::PathHolder {
  let mut line: usize;
  let mut column: usize;
  let mut width: usize;

  public: SourceLocation() :
    super(glb_ctx.register_path(new Path("<unknown>"))),
    line(0UL),
    column(0UL),
    width(0UL)
  {}

  SourceLocation(line: usize, column: usize, width: usize, path: CachedPath) :
    super(path),
    line(line),
    column(column),
    width(width)
  {}

  @inline func get_line() usize { return self.line; }
  @inline func get_column() usize { return self.column; }
  @inline func get_width() usize { return self.width; }
}

public class LocationHolder {
  let mut location: SourceLocation;

  public: LocationHolder() : location(new SourceLocation()) {}
  public: LocationHolder(location: SourceLocation) : location(location) {}

  @inline func get_location() SourceLocation { return self.location; }
  @inline func set_location(location: SourceLocation) { self.location = location; }
}
