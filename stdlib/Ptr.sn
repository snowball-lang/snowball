import Core::CLib;

/**
 * A wrapper for non-null references to types that bypass the `Sized` check.
 * This ensures that the reference is not null and provides methods to access the underlying value.
 *
 * @tparam T - type of the value
 * @note This class is a wrapper for non-null references to types that bypass the `Sized` check.
 * This ensures that the reference is not null and provides methods to access the underlying value.
 *
 * @example
 * ```
 * importPanic::panic;
 * import Core::Ptr;
 * import[[use_macros]] Core::Assert;
 *
 * let value: i32 = 42;
 * let non_null_value = new NonNull{&value};
 * @assert(*non_null_value.ptr() == value);
 * ```
 * @endexample
 */
public class NonNull<T: Sized> {
    /**
     * The underlying non-null reference value.
     */
    let value: *const T;
  public:
    /**
     * Creates a new `NonNull` instance from a non-null reference.
     *
     * @throws Panic if the provided reference is a null pointer reference.
     * @param value A reference to a value that implements the `Sized` trait.
     */
    NonNull(value: *const T) 
      : value(value)
    {
      if (value.is_null()) {
        // TODO: panic!
      }
    }
    /**
     * Returns a reference to the underlying non-null value.
     * @return A reference to the underlying value.
     */
    @inline
    func ptr() *const T { return self.value; }
}

/**
 * @brief Returns a null pointer for a given pointer type.
 * @tparam PtrType - pointer type
 * @return PtrType - null pointer
 */
@inline
public func null_ptr<PtrType: Sized>() *const PtrType {
  unsafe { return 0 as *const void as *const PtrType; }
}

/**
 * @brief An utility class to allocate memory blocks for a given type.
 * @tparam T - type of the memory block
 */
public class Allocator<T: Sized> {
  public:
    Allocator() {}

    /**
     * Allocates a memory block for a given type.
     * @param size - size of the memory block to be allocated
     * @return NonNull{T} - a non-null pointer to the allocated memory block
     */
    @inline
    static func alloc(size: i32) NonNull<T> {
      unsafe {
        return new NonNull<T>(CLib::malloc(size) as *const T);
      }
    }
    /**
     * Allocates a memory block for a given type and initializes it with zeros.
     * @param size - size of the memory block to be allocated
     * @return NonNull{T} - a non-null pointer to the allocated memory block
     */
    @inline
    static func alloc_zeroed(size: i32) NonNull<T> {
      unsafe {
        return new NonNull<T>(CLib::calloc(size, 1));
      }
    }
    /**
     * Reallocates a memory block for a given type.
     * @param ptr - pointer to the memory block to be reallocated
     * @param size - size of the memory block to be reallocated
     * @return NonNull{T} - a non-null pointer to the reallocated memory block
     */
    @inline
    static func realloc(ptr: NonNull<T>, size: i32) NonNull<T> {
      unsafe {
        return new NonNull<T>(CLib::realloc(ptr.ptr(), size));
      }
    }
    /**
     * It frees a memory block.
     * @param ptr - pointer to the memory block to be freed
     */
    @inline
    static func free(ptr: NonNull<T>) {
      unsafe { CLib::free(ptr.ptr()); }
    }
}

@inline
public unsafe func add<T: Sized>(ptr: *const T, offset: i32) *mut T {
  return (ptr + offset) as *mut T;
}

@inline
public unsafe func write<T: Sized>(mut ptr: *const T, value: T) {
  *ptr = value;
}

@inline
public func to_pointer<T: Sized>(value: &T) *const T {
  unsafe { return value as *const T; }
}

@inline
public func copy_nonoverlapping<T: Sized>(src: *const T, dst: *mut T, count: i32) {
  // TODO: Change '8' with actual pointer type size
  unsafe { CLib::memmove(dst, src, count); }
}
