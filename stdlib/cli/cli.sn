
import std::map::{Map};
import std::opt::{Option, none, some}
import std::io;

/**
 * @brief Custom exception class for handling argument-related errors.
 * 
 * This class represents a custom exception used for handling errors related to command-line arguments. 
 * It inherits from the base Exception class and provides a specific error type for argument-related issues.
 */
public class ArgumentError extends Exception {}
/**
 * @brief A class representing a command-line option.
 * 
 * This class represents a command-line option, which can have various attributes such as a name, description, 
 * required flag, default value, and aliases. Options are used to configure the behavior of command-line programs 
 * by specifying additional parameters and settings.
 */
public class Opt {
  /// @brief The name of the option.
  let mut name: String;
  /// @brief The description of the option.
  let mut description: Option<String>;
  /// @brief The default value of the option.
  let mut default_val: Option<String>;
  /// @brief The aliases associated with the option.
  let mut aliases: Vector<String>;
  /**
   * @brief Constructs an Opt object with the specified parameters.
   * @param[in] name The name of the option.
   * @param[in] description The description of the option.
   * @param[in] required Flag indicating whether the option is required.
   * @param[in] default_val The default value of the option.
   * @param[in] aliases The aliases associated with the option.
   */
  public: Opt(name: String, description: String = "",
              default_val: Option<String> = none<?String>(), 
              aliases: Vector<String> = new Vector<String>()) {
    self.name = name;
    if description.is_empty() { self.description = none<?String>(); } 
    else { self.description = some(description); }
    self.default_val = default_val;
    self.aliases = aliases;
  }
  /// Sets the name of the option.
  @inline mut func name(n: String) Self 
    { self.name = n; return self; }
  /// Sets the description of the option.
  @inline mut func description(d: String) Self 
    { self.description = some(d); return self; }
  /// Sets the default value of the option.
  @inline mut func default_val(d: String) Self 
    { self.default_val = some(d); return self; }
  /// Adds an alias to the option.
  @inline mut func add_alias(a: String) Self 
    { self.aliases.push(a); return self; }
  /// @brief Returns the name of the option.
  @inline func name() String { return self.name; }
  /// @brief Returns the description of the option.
  @inline func description() Option<String> { return self.description; }
  /// @brief Returns the default value of the option.
  @inline func default_val() Option<String> { return self.default_val; }
  /// @brief Returns the aliases associated with the option.
  @inline func aliases() Vector<String> { return self.aliases; }
  /// @brief Overloads the equality operator for the Opt class.
  @inline operator func ==(other: Opt) bool 
    { return self.name == other.name; }
}
/**
 * @brief A class representing a command-line argument.
 * 
 * This class represents a command-line argument, which typically serves as input parameters for a command-line program.
 * An argument can have attributes such as a name, description, required flag, and default value. Command-line arguments 
 * are used to specify input values or configurations when executing a program from the command line.
 */
public class Arg { 
  /// @brief The name of the argument.
  let mut name: String;
  /// @brief The description of the argument.
  let mut description: Option<String>;
  /// @brief Flag indicating whether the argument is required.
  let mut required: bool; 
  /// @brief The default value of the argument.
  let mut default_val: Option<String>;
  /**
   * @brief Constructs an Arg object with the specified parameters.
   * @param[in] name The name of the argument.
   * @param[in] description The description of the argument.
   * @param[in] required Flag indicating whether the argument is required.
   * @param[in] default_val The default value of the argument.
   */
  public: Arg(name: String, description: String = "", required: bool = false) {
    self.name = name;
    if description.is_empty() { self.description = none<?String>(); }
    else { self.description = some(description); }
    self.required = required;
    self.default_val = none<?String>();
  }
  /// Sets the name of the argument.
  @inline mut func name(n: String) Self 
    { self.name = n; return self; }
  /// Sets the description of the argument.
  @inline mut func description(d: String) Self 
    { self.description = some(d); return self; }
  /// Sets the required flag of the argument.
  @inline mut func required(r: bool) Self 
    { self.required = r; return self; }
  /// Sets the default value of the argument.
  @inline mut func default_val(d: String) Self 
    { self.default_val = some(d); return self; }
  /// Returns the name of the argument.
  @inline func name() String { return self.name; }
  /// Returns the description of the argument.
  @inline func description() Option<String> { return self.description; }
  /// Returns the required flag of the argument.
  @inline func required() bool { return self.required; }
  /// Returns the default value of the argument.
  @inline func default_val() Option<String> { return self.default_val; }
  /// Overloads the equality operator for the Arg class.
  operator func ==(other: Arg) bool { return self.name == other.name; }
}
/**
 * @brief A class representing a command-line interface (CLI).
 *        The CLI can have a name, version, description, author, license, repository,
 *        options, and arguments.
 */
public class Cli {
  /// @brief The name of the CLI.
  let name: String;
  /// @brief The version of the CLI.
  let mut version: Option<String>;
  /// @brief The description of the CLI.
  let mut description: Option<String>;
  /// @brief The author of the CLI.
  let mut author: Option<String>;
  /// @brief The license of the CLI.
  let mut license: Option<String>;
  /// @brief The repository of the CLI.
  let mut repository: Option<String>;
  /// @brief The options of the CLI.
  let mut options: Vector<Opt>;
  /// @brief The arguments of the CLI.
  let mut args: Vector<Arg>;
  /**
   * @brief Constructs a Cli object with the specified parameters.
   * @param[in] name The name of the CLI.
   * @param[in] version The version of the CLI.
  */
  public: Cli(name: String, version: String = "") : name(name) {
    self.version = none<?String>();
    if version.is_empty() { self.version = none<?String>(); } 
    else { self.version = some(version); }
    self.author = none<?String>();
    self.license = none<?String>();
    self.repository = none<?String>();
    self.options = new Vector<Opt>();
    self.args = new Vector<Arg>();
    self.description = none<?String>();
    self.add_opt(new Opt("help", "Print this help message").add_alias("h"));
  }
  /// Sets the version of the CLI.
  @inline func version(version: String) 
    { self.version = some(version); }
  /// Sets the description of the CLI.
  @inline mut func description(description: String) Self 
    { self.description = some(description); return self; }
  /// Sets the author of the CLI.
  @inline mut func author(author: String) Self 
    { self.author = some(author); return self; }
  /// Sets the license of the CLI.
  @inline mut func license(license: String) Self 
    { self.license = some(license); return self; }
  /// Sets the repository of the CLI.
  @inline mut func repository(repository: String) Self 
    { self.repository = some(repository); return self; }
  /// Returns the name of the CLI.
  @inline func name() String { return self.name; }
  /// Returns the version of the CLI.
  @inline func version() Option<String> { return self.version; }
  /// Returns the description of the CLI.
  @inline func description() Option<String> { return self.description; }
  /// Returns the author of the CLI.
  @inline func author() Option<String> { return self.author; }
  /// Returns the license of the CLI.
  @inline func license() Option<String> { return self.license; }
  /// Returns the repository of the CLI.
  @inline func repository() Option<String> { return self.repository; }
  /**
   * @brief Returns the options of the CLI.
   * @param[in] opt The option to be added.
   * @return The options of the CLI.
   */
  func add_opt(opt: Opt) {
    if self.options.find(opt) != -1 {
      throw new ArgumentError("Option " + opt.name() + " already exists");
      return;
    }
    self.options.push(opt);
  }
  /**
   * @brief Adds an option to the CLI.
   * @param[in] name The name of the option.
   * @param[in] description The description of the option.
   * @param[in] required Flag indicating whether the option is required.
   * @param[in] default_val The default value of the option.
   * @param[in] aliases The aliases associated with the option.
   */
  @inline
  func add_opt(name: String, description: String = "", 
                default_val: Option<String> = none<?String>(), 
                aliases: Vector<String> = new Vector<String>()) {
    self.add_opt(new Opt(name, description, default_val, aliases));
  }
  /**
   * @brief Returns the arguments of the CLI.
   * @param[in] arg The argument to be added.
   * @return The arguments of the CLI.
   */
  func add_arg(arg: Arg) {
    if self.args.find(arg) != -1 {
      throw new ArgumentError("Argument " + arg.name() + " already exists");
      return;
    }
    self.args.push(arg);
  }
  /**
   * @brief Adds an argument to the CLI.
   * @param[in] name The name of the argument.
   * @param[in] description The description of the argument.
   * @param[in] required Flag indicating whether the argument is required.
   * @param[in] default_val The default value of the argument.
   */
  @inline
  func add_arg(name: String, description: String = "") {
    self.add_arg(new Arg(name, description));
  }
  /**
   * @brief Parses the command-line arguments.
   * @param[in] args The command-line arguments.
   * @return A dictionary containing the parsed arguments.
   */
  func parse(args: Vector<String>) Map<String, String> {
    try {
      return self.parse_args(args);
    } catch (e: ArgumentError) {
      io::println("Error: " + e.what());
      io::println("Try '" + self.name + " --help' for more information.");
      io::exit(1);
      return new Map<String, String>();
    }
  }
private:
  /**
   * @brief Parses the command-line arguments and returns a map containing the parsed arguments.
   * 
   * This function parses the command-line arguments provided as a vector of strings and returns a map 
   * containing the parsed arguments. It iterates through the arguments, processes each one, and adds 
   * them to the map accordingly. It also checks for required arguments and ensures that they are present.
   * 
   * @param args A reference to a vector containing the command-line arguments.
   * @return A map containing the parsed arguments where keys are argument names and values are argument values.
   * @throws ArgumentError If required arguments are missing or if too many arguments are provided.
   */
  func parse_args(args: &Vector<String>) Map<String, String> {
    let mut parsed_args = new Map<String, String>();
    for let i = 1; i < args.size(); i = i+1 {
      if self.process_arg(args[i], parsed_args) {
        self.add_args(i, args, parsed_args);
      }
    }
    self.check_required_args(parsed_args);
    return parsed_args;
  }
  /**
   * @brief Checks for required arguments in the parsed arguments map.
   * 
   * This function iterates through the list of arguments and checks if any required arguments are missing 
   * in the parsed arguments map. If a required argument is missing, it throws an ArgumentError.
   * 
   * @param parsed_args A reference to a map containing the parsed arguments.
   * @throws ArgumentError If any required argument is missing.
   */
  func check_required_args(parsed_args: &Map<String, String>) {
    for arg in self.args {
      if arg.required() && !parsed_args.has(arg.name()) {
        throw new ArgumentError("Missing required argument " + arg.name());
      }
    }
  }
  /**
   * @brief Adds arguments to the parsed arguments map.
   * 
   * This function adds arguments to the parsed arguments map based on their positions and the corresponding 
   * argument in the argument list. It ensures that the number of arguments does not exceed the expected count.
   * 
   * @param i The index of the current argument being processed.
   * @param args A reference to a vector containing the command-line arguments.
   * @param parsed_args A reference to a map containing the parsed arguments.
   * @throws ArgumentError If too many arguments are provided.
   */
  @inline func add_args(i: i32, args: &Vector<String>, mut parsed_args: &Map<String, String>) {
    if (i - 1) >= self.args.size() {
      throw new ArgumentError("Too many arguments");
    }
    let arg = self.args[i - 1];
    parsed_args.set(arg.name(), args[i]);
  }
  /**
   * @brief Processes a single command-line argument.
   * 
   * This function processes a single command-line argument. It checks if the argument is a help command 
   * and exits if needed. It also handles options by parsing and processing them accordingly.
   * 
   * @param arg The command-line argument to be processed.
   * @param parsed_args A reference to a map containing the parsed arguments.
   * @return True if the argument is not an option, false otherwise.
   */
  func process_arg(arg: String, mut parsed_args: &Map<String, String>) bool {
    self.help_exit_if_needed(arg);
    if arg.starts_with("--") {
      self.process_option(arg.substr(2), parsed_args);
      return false;
    } else if arg.starts_with("-") {
      self.process_option(arg.substr(1), parsed_args);
      return false;
    }
    return true;
  }
  /**
   * @brief Finds and returns the option corresponding to the given argument.
   * 
   * This function searches for the option corresponding to the given argument. If the option is not found, 
   * it throws an ArgumentError.
   * 
   * @param arg The argument representing the option.
   * @return The option corresponding to the given argument.
   * @throws ArgumentError If the option is not found.
   */
  @inline func find_opt(arg: String) Opt {
    let mut opt_idx = self.options.find(new Opt(arg));
    if opt_idx == -1 {
      throw new ArgumentError("Unknown option " + arg);
    }
    return self.options[opt_idx];
  }
  /**
   * @brief Processes an option and adds it to the parsed arguments map.
   * 
   * This function processes an option by finding its corresponding Opt object, setting its value in the 
   * parsed arguments map, and handling default values if specified.
   * 
   * @param arg The argument representing the option.
   * @param parsed_args A reference to a map containing the parsed arguments.
   */
  @inline func process_option(arg: String, mut parsed_args: &Map<String, String>) {
    let opt = self.find_opt(arg);
    if opt.default_val().is_some() {
      parsed_args.set(opt.name(), opt.default_val().unwrap_or(""));
    } else {
      parsed_args.set(opt.name(), "true");
    }
  }
  /**
   * @brief Prints the help message and exits if the help command is encountered.
   * 
   * This function checks if the provided argument is a help command. If it is, it prints the help message 
   * and exits the program with a success status code.
   * 
   * @param arg The command-line argument to be checked.
   */
  @inline func help_exit_if_needed(arg: String) {
    if arg == "--help" || arg == "-h" {
      self.print_help();
      io::exit(0);
    }
  }
public:
  /**
   * @brief Parses the command-line arguments.
   * @param[in] args The command-line arguments.
   * @return A dictionary containing the parsed arguments.
   */
  func print_help() {
    // TODO: make this look nicer once we have "if let()" syntax!
    io::print(self.name);
    if self.version.is_some() {
      io::print(" version " + self.version.unwrap_or(""));
    }
    if self.description.is_some() {
      io::print("\n - " + self.description.unwrap_or(""));
    }
    io::println("\n");
    io::print("USAGE: " + self.name);
    for arg in self.args {
      if arg.required() {
        io::print(" <" + arg.name() + ">");
      } else {
        io::print(" [" + arg.name() + "]");
      }
    }
    if self.options.size() > 0 {
      io::print(" [...OPTIONS]");
    }
    io::println("\n");
    if self.options.size() > 0 {
      io::println("OPTIONS:");
      for arg in self.options {
        let mut arg_str = "  --" + arg.name();
        for alias in arg.aliases() {
          arg_str = arg_str + ", -" + alias;
        }
        io::print(arg_str.ljust(20));
        if arg.description().is_some() {
          io::print(arg.description().unwrap_or(""));
        }
        if arg.default_val().is_some() {
          io::print(" (default: " + arg.default_val().unwrap_or("") + ")");
        }
        io::println("");
      }
    }
    if self.author.is_some() {
      io::println("AUTHOR:");
      io::println("  " + self.author.unwrap_or(""));
    }
    if self.license.is_some() {
      io::println("LICENSE:");
      io::println("  " + self.license.unwrap_or(""));
    }
    if self.repository.is_some() {
      io::println("REPOSITORY:");
      io::println("  " + self.repository.unwrap_or(""));
    }
    io::println("");
  }
}
