
/**
 * Returns true if the given character is a whitespace character.
 * 
 * @param c The character to check.
 * @return True if the given character is a whitespace character.
 */
@inline
public func is_space(c: u8) bool {
    return c == ' ' || c == '\t' 
       || c == '\n' || c == '\r';
}
/**
 * Returns true if the given character is an
 *  upper-case character.
 *
 * @param c The character to check.
 * @return True if the given character is an
 *  upper-case character.
 */
@inline
public func is_upper(c: u8) bool 
    { return c >= 'A' && c <= 'Z'; }
/**
 * Returns true if the given character is a
 *  lower-case character.
 *
 * @param c The character to check.
 * @return True if the given character is a
 *  lower-case character.
 */
@inline
public func is_lower(c: u8) bool
    { return c >= 'a' && c <= 'z'; }
/**
 * Returns true if the given character is a
 *  digit.
 *
 * @param c The character to check.
 * @return True if the given character is a
 *  digit.
 */
@inline
public func is_digit(c: u8) bool
    { return c >= '0' && c <= '9'; }
/**
 * Returns true if the given character is a
 *  hexadecimal digit.
 *
 * @param c The character to check.
 * @return True if the given character is a
 *  hexadecimal digit.
 */
@inline
public func is_hex(c: u8) bool { 
    return is_digit(c) || (c >= 'a' && c <= 'f') 
      || (c >= 'A' && c <= 'F'); 
}
/**
 * Returns true if the given character is an
 *  octal digit.
 *
 * @param c The character to check.
 * @return True if the given character is an
 *  octal digit.
 */
@inline
public func is_oct(c: u8) bool
    { return c >= '0' && c <= '7'; }
/**
 * Returns true if the given character is a
 *  letter.
 *
 * @param c The character to check.
 * @return True if the given character is a
 *  letter.
 */
@inline
public func is_alpha(c: u8) bool
    { return is_upper(c) || is_lower(c); }
/**
 * Returns true if the given character is a
 *  letter or digit.
 *
 * @param c The character to check.
 * @return True if the given character is a
 *  letter or digit.
 */
@inline
public func is_alpha_num(c: u8) bool
    { return is_alpha(c) || is_digit(c); }
/**
 * Returns true if the given character is a
 *  control character.
 *
 * @param c The character to check.
 * @return True if the given character is a
 *  control character.
 */
@inline
public func is_control(c: u8) bool
    { return c < 32 || c == 127; }
/**
 * Returns true if the given character is a
 *  printable character.
 *
 * @param c The character to check.
 * @return True if the given character is a
 *  printable character.
 */
@inline
public func is_print(c: u8) bool
    { return !is_control(c); }
/**
 * Returns true if the given character is a
 *  punctuation character.
 *
 * @param c The character to check.
 * @return True if the given character is a
 *  punctuation character.
 */
@inline
public func is_punc(c: u8) bool {
    return c == '!' || c == '"' || c == '#' 
      || c == '$' || c == '%' || c == '&' 
      || c == '\'' || c == '(' || c == ')' 
      || c == '*' || c == '+' || c == ',' 
      || c == '-' || c == '.' || c == '/' 
      || c == ':' || c == ';' || c == '<' 
      || c == '=' || c == '>' || c == '?' 
      || c == '@' || c == '[' || c == '\\' 
      || c == ']' || c == '^' || c == '_' 
      || c == '`' || c == '{' || c == '|' 
      || c == '}' || c == '~';
}
/**
 * Returns true if the given character is a
 *  symbol character.
 *
 * @param c The character to check.
 * @return True if the given character is a
 *  symbol character.
 */
@inline
public func is_sym(c: u8) bool {
    return c == '+' || c == '-' || c == '*' 
      || c == '/' || c == '\\' || c == '|' 
      || c == '&' || c == '^' || c == '<' 
      || c == '>' || c == '=' || c == '~' 
      || c == '@' || c == '$' || c == '%' 
      || c == '!' || c == '?';
}
/**
 * Returns true if the given character is a
 *  mark character.
 *
 * @param c The character to check.
 * @return True if the given character is a
 *  mark character.
 */
@inline
public func is_mark(c: u8) bool {
    return c == '`' || c == '\'' || c == '^' 
      || c == '"' || c == '~' || c == '.' 
      || c == '-' || c == '_' || c == '*' 
      || c == '+' || c == '=' || c == '<' 
      || c == '>' || c == '@' || c == ':' 
      || c == '/' || c == '\\' || c == '|' 
      || c == '!' || c == '?' || c == '#' 
      || c == '$' || c == '%' || c == '&' 
      || c == '(' || c == ')' || c == '[' 
      || c == ']' || c == '{' || c == '}';
}
