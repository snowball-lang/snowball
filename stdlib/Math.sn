import Core::CLib;
import Core::Ptr;
/**
 * It performs the square root of a given floating-point number.
 *
 * @param x The floating-point number to perform the square root of.
 * @return The square root of the given number.
 */
public external func "llvm.sqrt.f64" as sqrt(f64) f64;
/**
 * It returns the minimum of two given unknown numbers.
 *
 * @param x The first number.
 * @param y The second number.
 * @return The minimum of the two given numbers.
 */
public func min<T: Numeric>(x: T, y: T) T 
    { if x < y { return x } else { return y } } // TODO: importternary operator once implemented

/**
 * The constant value of pi, accurate to 35 decimal places.
 * @example PI // returns 3.141592653589793238462643383279502884197
 */
public const PI: f32 = 3.141592653589793238462643383279502884197;
/**
 * @brief The natural logarithm of pi.
 */
public const logpi: f32 = 1.144729885849400174143427351353058711647;
/**
 * @brief The square root of pi.
 */
public const sqrtpi: f32 = 1.772453850905516027298167483341145182798;
/**
 * @brief Positive infinity constant.
 */
public const inf: f64 = 1.0 as f64 / 0.0 as f64;
/**
 * @brief Check if a floating-point number is NaN (not-a-number).
 * 
 * @param x The number to check.
 * @return True if `x` is NaN, false otherwise.
 */
public func is_nan(x: f64) bool {
    return x != x;
}
/**
 * @brief Check if a floating-point number is infinite.
 * 
 * @param x The number to check.
 * @return True if `x` is infinite, false otherwise.
 */
public func is_inf(x: f64) bool {
    return x == inf;
}

