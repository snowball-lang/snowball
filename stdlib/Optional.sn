/**
 * @file Optional.sn
 * @brief A module for handling optional values using the `Option` type.
 *
 * The `Optional.sn` module provides the `Option` type, which represents either a value or nothing at all.
 * This module is essential for handling scenarios where a value may or may not exist, offering a safe and
 * expressive way to work with optional values.
 */

/**
 * @class BadOptionAccess
 * @brief An error class representing a failed attempt to access an empty `Option`.
 *
 * The `BadOptionAccess` class is an exception that is thrown when an attempt is made to access
 * a value from an empty `Option`. It is used to signal that an operation that requires a value
 * has failed due to the `Option` being empty.
 */
public class BadOptionAccess extends Exception
  {}
/**
 * A type that represents either a value or nothing at all.
 *
 * The `Option` type is a fundamental concept used in many places, encoding the common scenario where
 * a value can exist or be absent. For example, it is employed in functions that return values that may
 * or may not be present, such as the `find` method on containers like `Array` and `Hash`. It is also
 * used in the return type of functions that might not guarantee a result, like `Array::pop` or `Hash::delete`.
 *
 * @typeparam T The type of value that the `Option` can hold.
 */
public class Option<T: Sized> {
    /**
     * The value stored in the `Option`.
     */
    let _value: T = @zero_initialized(:T);
    /**
     * Whether the `Option` is engaged.
     */
    let _engage: bool = false;
  public:
    /**
     * Creates a new empty `Option`.
     */
    Option() {}
    /**
     * Creates a new `Option` with the given value.
     *
     * @param value The value to store in the `Option`.
     */
    Option(value: T) : _value(value), 
      _engage(true) {}
    /**
     * @brief Returns the value stored in the `Option`.
     */
    @inline
    func val() T
    {
      self.assert_not_empty();
      return self._value;
    }
    /**
     * @brief Returns whether the `Option` is empty.
     */
    @inline
    func empty() bool 
    {
      return !self._engage;
    }
    /**
     * @brief Whether the `Option` is engaged.
     */
    @inline
    func has_value() bool
      { return self._engage; }
    /**
     * @return The value stored in the `Option` or the
     *        given default value if the `Option` is empty.
     */
    @inline
    func value_or(default_value: T) T
    {
      if self.empty() {
        return default_value;
      }
      return self.val();
    }
  private:
    /**
     * @brief Throws an error if the `Option` is empty.
     */
    @inline
    func assert_not_empty()
    {
      if (self.empty()) {
        throw new BadOptionAccess("Attempted to access empty Option");
      }
    }
}
/**
 * @brief Creates a new `Option` with the given value.
 *
 * The `Some` function is a utility that constructs an `Option` containing a value.
 *
 * @param value The value to store in the `Option`.
 * @return An `Option` containing the provided value.
 */
@inline
public func Some<_StoreType>(value: _StoreType) Option<_StoreType>
  { return new Option<_StoreType>(value); }

/**
 * @brief Creates a new empty `Option`.
 *
 * The `None` function is a utility that creates an empty `Option`.
 *
 * @return An empty `Option`.
 */
@inline
public func None<_StoreType>() Option<_StoreType>
  { return new Option<_StoreType>(); }
