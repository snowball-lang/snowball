import std::env;
import std::clib;

@cfg(target_os="windows")  
@export
macro PATH_SEPARATOR() = "\\";
@cfg(target_os="!windows")
@export
macro PATH_SEPARATOR() = "/";

/**
 * @brief Error thrown when a file or directory does not exist.
 * Another example of an error is when a file or directory cannot be created.
 */
public class PathError extends Exception {}
/**
 * @brief A path to a file or directory.
 * 
 * This is a wrapper around a string that provides some useful
 * operations for manipulating paths.
 */
public class Path implements ToString, Iterable<String> {
    /// The path as a string.
    let path: Vector<String>;
  public:
    /**
     * Create a new path from a vector of strings.
     */
    Path(path: Vector<String>) : path(path) { self.reset(); }
    /**
     * Create a new path from a string.
     */
    Path(path: String) : path(path.split(#PATH_SEPARATOR)) { self.reset(); }
    /**
     * @brief Join two paths together.
     * @param other The path to join to this one.
     * @return The joined path.
     */ 
    @inline
    func join(other: String) Path { 
      let mut copy = self.path;
      copy.push(other);
      return new Path(copy); 
    }
    /**
     * @brief Join two paths together.
     * @param other The path to join to this one.
     * @return The joined path.
     */
    @inline
    func join(other: Path) Path { 
      if other.is_empty() {
        return self;
      }
      let mut copy = self.path;
      // C-style loop for faster iteration.
      for let i = 0; i < other.path.size(); i = i + 1 {
        copy.push(other.path[i]);
      }
      return new Path(copy); 
    }
    /**
     * @brief It return's the next element in the path.
     * @return The next element in the path.
     */
    virtual mut func next() Iter<String> {
      // Increment the iterator index.
      self.iter_index = self.iter_index + 1;
      // If the iterator index is greater than or equal to the end of the range,
      // return an invalid iterator.
      if self.iter_index >= self.path.size() {
        return Iter<?String>::invalid();
      }
      // Otherwise, return a valid iterator with the current iterator index.
      return Iter<?String>::valid(self.path[self.iter_index]);
    }
    /**
     * @brief Resets the iteration to the beginning of the path.
     */
    @inline
    override virtual mut func reset() { self.iter_index = -1; }
    /**
     * @brief Returns whether the path is empty.
     * @return Whether the path is empty.
    */
    @inline
    func is_empty() bool { return self.path.is_empty(); }

    // Operators

    operator func ==(other: Path) bool {
      if self.path.size() != other.path.size() {
        return false;
      }
      for let i = 0; i < self.path.size(); i = i + 1 {
        if self.path[i] != other.path[i] {
          return false;
        }
      }
      return true;
    }
    operator func !=(other: Path) bool 
      { return !(self == other); }
    operator func /(other: Path) Path 
      { return self.join(other); }
    operator func /(other: String) Path 
      { return self.join(other); }
    operator func +(other: String) Path {
      let copy = self.path;
      copy[self.path.size() - 1] += other;
      return new Path(copy);
    }
    /**
     * @brief Returns the string representation of the path.
    */
    @inline
    func to_string() String { return (#PATH_SEPARATOR).join(self.path); }
    /**
     * @brief Returns the size of the path.
     * @return The size of the path.
    */
    @inline
    func size() i32 { return self.path.size(); }
    /**
     * @brief It removes the dot segments from the path.
     * @param double_dots Whether to remove double dots.
     * @return The path without dot segments.
     */
    func clean_path(double_dots: bool = false) Path {
      let mut copy = self.path;
      let mut i = 0;
      while i < copy.size() {
        if copy[i] == "." {
          copy.remove(i);
        } else if double_dots && copy[i] == ".." {
          copy.remove(i);
          if i > 0 {
            copy.remove(i - 1);
            i = i - 1;
          }
        } else {
          i = i + 1;
        }
      }
      return new Path(copy);
    }
    /**
     * @brief Removes the file or directory at the path.
     * @return Whether the file or directory was removed.
     */
    func remove() bool {
      let mut copy = self.path;
      let mut i = copy.size() - 1;
      while i >= 0 {
        if copy[i] == "." {
          copy.remove(i);
        } else if copy[i] == ".." {
          copy.remove(i);
          if i > 0 {
            copy.remove(i - 1);
            i = i - 1;
          }
        } else {
          break;
        }
        i = i - 1;
      }
      let path = (#PATH_SEPARATOR).join(copy);
      unsafe {
        let err = clib::files::remove(path.c_str());
        if err != 0 {
          throw new PathError("Coudn't remove path (" + path + "): " + env::posix_get_error_msg(clib::errno()));
        }
      }
      return true;
    }
    /**
     * @brief Returns whether the file or directory exists.
     * @return Whether the file or directory exists.
     */
    func exists() bool {
      let mut copy = self.path;
      let mut i = copy.size() - 1;
      while i >= 0 {
        if copy[i] == "." {
          copy.remove(i);
        } else if copy[i] == ".." {
          copy.remove(i);
          if i > 0 {
            copy.remove(i - 1);
            i = i - 1;
          }
        } else {
          break;
        }
        i = i - 1;
      }
      let path = (#PATH_SEPARATOR).join(copy);
      unsafe {
        let err = clib::files::access(path.c_str(), 0);
        return err == 0;
      }
    }
}
