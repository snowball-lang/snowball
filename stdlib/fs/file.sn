import std::fs::path;
import std::clib;
import std::env;
import std::ptr;

/**
 * An error thrown when a mode is invalid.
 * For example, if the mode is "@", this error will be thrown.
 */
public class InvalidFileMode extends Exception 
  { }
/**
 * An error thrown when a file coudln't be opened.
 * For example, if the file doesn't exist, this error will be thrown.
 */
public class FileOpenError extends Exception 
  { }
/**
 * An error thrown when a file is already open.
 * For example, if the file is already open, this error will be thrown.
 */
public class FileAlreadyOpenError extends Exception 
  { }
/**
 * An error thrown when a file is not open.
 * For example, if the file is not open, this error will be thrown.
 */
public class FileNotOpenError extends Exception 
  { }
/**
 * @brief A file.
 * This class represents a file on the filesystem.
 * A file can be opened for reading or writing. It can also be 
 * created or deleted. This class gives all those operations in a
 * safe and easy to use interface. 
 */
public class File implements ToString, Debug {
  /**
   * @brief If the file is open.
   * This is true if the file is open, false otherwise.
   * This flag can be used to check if the file is open before
   * attempting to read or write to it.
   */
  let mut open: bool;
  /**
   * @brief The path to the file.
   * This is the path to the file on the filesystem.
   */
  let path: path::Path;
  /**
   * @brief A pointer to a file.
   * This is a pointer to a file. It is used to read and write to the file.
   */
  let mut file: *const void; // Instead of FILE*
 public:
  /**
   * @brief Create a new file.
   * @param path The path to the file.
   * @param mode The mode to open the file in.
   * @return The new file.
   */
  File(path: path::Path, mode: String) : path(path) {
    self.open = false;
    self.file = zero_initialized!(:*const void);
    self.open(mode);
  }
  /**
   * @brief Open the file.
   * @param mode The mode to open the file in.
   * @return Whether the file was opened successfully.
   */
  mut func open(mode: String) bool {
    // we don't want to open the file twice.
    if self.open {
      throw new FileAlreadyOpenError("File is already open.");
    }
    // safety: we are using the C bindings, so we need to be careful.
    unsafe {
      let cfile = clib::files::fopen(self.path.to_string().c_str(), mode.c_str());
      if cfile.is_null() {
        throw new FileOpenError("Failed to open or create file (" + self.path.to_string() + "): " + env::posix_get_error_msg(clib::errno()));
      }
      self.open = true;
      self.file = cfile;
    }
    return true;
  }
  /**
   * @brief Close the file.
   * @return Whether the file was closed successfully.
   */
  mut func close() bool {
    // we don't want to close the file twice.
    if !self.open {
      return false; // TODO: should this throw an error?
    }
    // safety: we are using the C bindings, so we need to be careful.
    unsafe {
      let result = clib::files::fclose(self.file);
      if result != 0 {
        throw new FileOpenError("Failed to close file (" + self.path.to_string() + "): " + env::posix_get_error_msg(clib::errno()));
      }
      self.open = false;
      self.file = zero_initialized!(:*const void);
    }
    return true;
  }
  /**
   * @brief Read from the file.
   * @return The data read from the file.
   */
  mut func read() String {
    self.assert_open();
    // safety: we are using the C bindings, so we need to be careful.
    unsafe {
      clib::files::fseek(self.file, 0, /*SEEK_END*/2);
      let size = clib::files::ftell(self.file);
      clib::files::fseek(self.file, 0, /*SEEK_SET*/0);
      unsafe {
        let data = clib::malloc(16*size);
        let result = clib::files::fread(data, 1, size, self.file);
        if result != size {
          throw new FileOpenError("Failed to read from file (" + self.path.to_string() + "): " + env::posix_get_error_msg(clib::errno()));
        }
        let str = String::from(data, result);
        //ptr::Allocator<?u8>::free(data);
        return str;
      }
    }
  }
  /**
   * @brief Write to the file.
   * @param data The data to write to the file.
   * @return Whether the data was written successfully.
   */
  mut func write(data: String) bool {
    self.assert_open();
    // safety: we are using the C bindings, so we need to be careful.
    unsafe {
      let result = clib::files::fwrite(data.c_str(), 1, data.size(), self.file);
      if result != data.size() {
        throw new FileOpenError("Failed to write to file (" + self.path.to_string() + "): " + env::posix_get_error_msg(clib::errno()));
      }
    }
    return true;
  }
  /**
   * @brief Create a new file from a C file pointer.
   * @param path The path to the file.
   * @return The new file.
   */
  @inline 
  unsafe static func from_c_file(path: path::Path, file: *const void) File {
    return new File(path, file);
  }
 private:
  /**
   * @brief Assert that the file is open.
   */
  @inline func assert_open() {
    if !self.open {
      throw new FileNotOpenError("File is not open.");
    }
  }
  /**
   * @brief Create a new file based on the C file pointer.
   * @param path The path to the file.
   * @param file The C file pointer.
   * @note This is a private constructor. It is used to create a new file
   *  from a C file pointer, meaning that it's unsafe. This constructor is
   *  used internally by the standard library to create a file from a C file
   *  pointer.
   */
  File(path: path::Path, file: *const void) : path(path), file(file) {
    self.open = true;
  }
}
