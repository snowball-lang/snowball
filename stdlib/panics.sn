@use_macro(current_location);
import std::sl;
import std::io;

/**
 * @brief Emits a panic message and exits the program.
 *
 * The `panic` function is used to emit an error message and terminate the program. It is often used to
 * handle critical errors or unexpected situations in the program. The function prints an error message
 * along with source code location information and exits the program.
 *
 * @param message The error message to emit.
 * @param _location The source code location information (default is the current location).
 *
 * @remarks The function prints the error message, source file, line number, and column number where the panic occurred.
 *  To enable backtrace information, it suggests running the program with the `SN_BACKTRACE=1` environment variable.
 */
@inline
public func panic(
  message: String = "Something went wrong! üê±", 
  _location: sl::SourceLocation = current_location!()
) {
  io::println("\n\n--------------------");
  io::println("Program panicked with message: " + message)
  io::println(" at " + _location.file() + "\e[1;37m:" + _location.line().to_string() + ":" + _location.column().to_string() + "\e[0m");
  io::println("\e[1;37mnote:\e[0m run with \e[1;37m`SN_BACKTRACE=1`\e[0m environment variable to get a backtrace\n");
  io::exit(127);
}

/**
 * @brief It is used to mark unreachable code.
 * 
 * The `unreachable` macro is used to mark code that is unreachable. It is often used to mark code that should
 * never be reached. If the code is reached, the program will panic with the specified message.
 * 
 * This is useful any time that the compiler can't determine that some code is unreachable. For example:
 *  - Match arms with guard conditions.
 *  - Loops that dynamically terminate.
 *  - Iterators that dynamically terminate.
 */
@export
macro unreachable() {
  pkg!(panic("internal error: entered unreachable code"));
}

/**
 * @brief It is used to mark TODO code.
 * 
 * The `todo` macro is used to mark code that is not yet implemented. It is often used to mark code that should
 * be implemented in the future. If the code is reached, the program will panic with the specified message.
 * 
 * This is useful any time that the compiler didn't implement some code, but it is expected to be implemented in the future.
 * 
 * @param message The error message to emit.
 */
@export
macro todo(message: const[str]) {
  pkg!(panic("not yet implemented: " + #message));
}

/**
 * @brief It is used to mark unimplemented code.
 * 
 * The `unimplemented` macro is used to mark code that is not yet implemented. It is often used to mark code that should
 * be implemented in the future. If the code is reached, the program will panic with the specified message.
 * 
 * This is useful any time that the compiler didn't implement some code, but it is expected to be implemented in the future.
 */
@export
macro unimplemented() {
  pkg!(panic("not yet implemented!"));
}
