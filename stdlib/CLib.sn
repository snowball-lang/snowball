/**
 * @file Common bindings for the C standard library
 */

public type c_obj = *const void;
public type c_int = i32;
public type c_char = i8;
public type c_bool = bool;
public type c_float = f32;
public type c_double = f64;
public type c_long = i64;
// TODO: add more types

/**
 * @brief Allocates size bytes of uninitialized storage.
 * @param size(c_int) - number of bytes to allocate
 * @return c_obj - a pointer that is suitably aligned for
 *  any object type with fundamental alignment.
 * @note(1) If size is zero, the behavior of malloc is implementation-defined.
 *  For example, a null pointer may be returned. Alternatively, a non-null
 *  pointer may be returned; but such a pointer should not be dereferenced,
 *  and should be passed to free to avoid memory leaks.
 * @note(2) malloc is thread-safe: it behaves as though only accessing the memory
 *  locations visible through its argument, and not any static storage.
 */
public external unsafe func malloc(c_int) c_obj;
/**
 * @brief Allocates memory for an array of num objects of size size and initializes all bytes in the allocated storage to zero.
 * @param num(c_int) - number of objects to allocate
 * @param size(c_int) - size of each object
 * @return c_obj - a pointer to the memory block allocated by the function.
 *  The type of this pointer is always void*, which can be cast to the desired type of data pointer
 *  in order to be dereferenceable.
 * @note(1) If size is zero, the return value depends on the particular library implementation (it may or may not be a null pointer),
 *  but the returned pointer shall not be dereferenced.
 * @note(2) If the function failed to allocate the requested block of memory, a null pointer is returned.
 * @note(3) calloc is thread-safe: it behaves as though only accessing the memory locations visible through its argument,
 *  and not any static storage.
 */
public external unsafe func calloc(c_int, c_int) c_obj;
/**
 * @brief Reallocates the given area of memory.
 * If ptr is not NULL, it must be previously allocated by malloc(),
 *  calloc() or realloc() and not yet freed with a call to free or
 *  realloc. Otherwise, the results are undefined.
 *
 * @param ptr(c_obj) - pointer to the memory area to be reallocated
 * @param new_size(c_int) - new size of the array in bytes
 *
 * @return c_int - On success, returns the pointer to the beginning of newly allocated
 *  memory. To avoid a memory leak, the returned pointer must be deallocated with free()
 *  or realloc(). The original pointer ptr is invalidated and any access to it is undefined
 *  behavior (even if reallocation was in-place).
 *
 *  On failure, returns a null pointer. The original pointer ptr remains valid and may need
 *  to be deallocated with free() or realloc().
 *
 * @note if new_size is zero, the behavior is implementation defined (null pointer may be
 *  returned (in which case the old memory block may or may not be freed), or some non-null
 *  pointer may be returned that may not be used to access storage).
 */
public external unsafe func realloc(c_obj, c_int) c_obj;
/**
 * @brief Deallocates the space previously allocated by malloc(), calloc() or realloc().
 * @param ptr(c_obj) - pointer to the memory to deallocate
 *
 * @note(1) The behavior is undefined if the value of ptr does not equal a value returned
 *  earlier by malloc(), calloc(), realloc()
 * @note(2) The function accepts (and does nothing with) the null pointer to reduce the amount
 *  of special-casing. Whether allocation succeeds or not, the pointer returned by an allocation
 *  function can be passed to free().
 * @note(3) free is thread-safe: it behaves as though only accessing the memory locations
 *  visible through its argument, and not any static storage.
 *
 * @return (none)
 */
public external unsafe func free(c_obj) void;
/**
 * @brief (memcpy) Copies count bytes from the object pointed to by src to the object pointed to by dest.
 * @param dest(c_obj) - pointer to the object to copy to
 * @param src(c_obj) - pointer to the object to copy from
 * @param count(c_int) - number of bytes to copy
 * @return c_obj - dest
 * @note(1) If the objects overlap, the behavior is undefined.
 * @note(2) If either dest or src is a null pointer, the behavior is undefined, even if count is zero.
 * @note(3) If the objects are not TriviallyCopyable, the behavior of memcpy is not specified and may be undefined.
 * @note(4) If the objects are potentially-overlapping or not TriviallyCopyable, use memmove or memcpy_s instead.
 */
public external unsafe func memcpy(c_obj, c_obj, c_int) void;
/**
 * @brief (memmove) Copies count bytes from the object pointed to by src to the object pointed to by dest.
 * @param dest(c_obj) - pointer to the object to copy to
 * @param src(c_obj) - pointer to the object to copy from
 * @param count(c_int) - number of bytes to copy
 * @return c_obj - dest
 * @note(1) The underlying type of the objects pointed to by both the source and destination pointers are irrelevant for this function;
 *  The result is a binary copy of the data.
 * @note(2) The function does not check for any terminating null character in source - it always copies exactly count bytes.
 * @note(3) If the objects overlap, the behavior is undefined.
 * @note(4) If either dest or src is a null pointer, the behavior is undefined, even if count is zero.
 * @note(5) If the objects are not TriviallyCopyable, the behavior of memcpy is not specified and may be undefined.
 * @note(6) If the objects are potentially-overlapping or not TriviallyCopyable, use memmove or memcpy_s instead.
 */
public external unsafe func memmove(c_obj, c_obj, c_int) void;
/**
 * @brief Writes every character from the null-terminated string str and one additional newline
 *  character '\n' to the output stream stdout, as if by repeatedly executing @func fputc.
 * @param str(String) This is the string to be written.
 * @return (c_int) If successful, non-negative value is returned. On error, the function returns EOF.
 *
 * @note(1) The puts function appends the newline character to the output, while fputs function does not.
 * @note(2) Different implementations return different non-negative numbers: some return the last character
 *  written, some return the number of characters written (or INT_MAX if the string was longer than that),
 *  some simply return a non-negative constant.
 * @note(3) A typical cause of failure for puts is running out of space on the file system, when stdout is
 *  redirected to a file.
 */
public external unsafe func puts(*const c_char) c_int;
/**
 * @brief Writes a character to the standard output (stdout).
 * @param character(c_int) - The `c_int` promotion of the character to be written.
 *  The value is internally converted to an `unsigned c_int` when written.
 * @return On success, the character written is returned.
 *  If a writing error occurs, EOF is returned.
 */
public external unsafe func putchar(c_char) c_int;
/**
 * @brief Reads the next character from stdin.
 * @return The obtained character on success or EOF on failure.
 */
public external unsafe func getchar() c_char;
/**
 * @brief Writes the string pointed by format to the standard output (stdout). If format includes format
 *  specifiers (subsequences beginning with %), the additional arguments following format are formatted and inserted
 *  in the resulting string replacing their respective specifiers.
 * @return On success, the total number of characters written is returned.
 */
public external unsafe func printf(*const c_char, ...) c_int;
/**
 * @brief Writes the string pointed by format to the character string pointed by str. If format includes format
 *  specifiers (subsequences beginning with %), the additional arguments following format are formatted and inserted
 *  in the resulting string replacing their respective specifiers.
 * @param str(&char) - pointer to a buffer where the resulting C-string is stored.
 * @param size(c_int) - maximum number of bytes to be used in the buffer.
 * @return On success, the total number of characters written is returned.
 *  If a writing error occurs, the error indicator (ferror) is set and a negative number is returned.
 */
public external unsafe func snprintf(*const c_char, c_int, *const c_char, ...) c_int;
/**
 * @brief Causes normal program termination to occur.
 * @param exit_code(c_int) - exit status of the program
 * @note(1) The behavior is undefined if a program calls exit more than once.
 */
public external unsafe func exit(c_int);
/**
 * @brief It gets the current time.
 * @param seconds(&c_int) - pointer to a variable where the number of seconds elapsed since the Epoch is stored.
 * @return c_int - If the time is successfully obtained, the return value is the same as the parameter seconds.
 */
public external unsafe func time(*const c_int) c_int;
/**
 * @brief It transforms a string into a C string.
 * @param str(&char) - string to be converted
 * @return &char - C string
 */
@export
macro c_str(x: const[str]) = (@x.bytes());   
/**
 * @brief a namespace that contains functions for manipulating strings.
 * @note(1) All functions in this namespace are thread-safe.
 */
namespace c_string {
/**
 * @brief It returns the length of string based on the null-terminator.
 * @param str(&char) - string to be measured
 * @return c_int - length of the string
 */
public external unsafe func strlen(*const c_char) c_int;
/**
 * @brief It checks if the two strings are equal.
 * @param str1(&char) - first string
 * @param str2(&char) - second string
 * @return bool - true if the strings are equal, false otherwise
 */
public external unsafe func strcmp(*const c_char, *const c_char) bool;
/**
 * @brief It copies the string pointed by source into the array pointed by destination, including the terminating null character (and stopping at that point).
 * @param destination(&char) - pointer to the destination array where the content is to be copied.
 * @param source(&char) - C string to be copied.
 * @return &char - pointer to the destination string destination.
 */
public external unsafe func strcpy(*const c_char, *const c_char) *const c_char;
/**
 * @brief It concatenates the string pointed to by source to the end of the string pointed to by destination.
 * @param destination(&char) - pointer to the destination array, which should contain a C string, and be large enough to contain the concatenated resulting string.
 * @param source(&char) - C string to be appended. This should not overlap destination.
 * @return &char - pointer to the destination string destination.
 */
public external unsafe func strcat(*const c_char, *const c_char) *const c_char;
} // namespace c_string

/**
 * @brief a namespace that contains some utility math functions.
*/
namespace cmath {
/**
 * @brief It converts a string into a double.
 * @param str(&char) - string to be converted

 * @return f64 - number
*/
public external unsafe func strtod(*const c_char, c_obj) f64;
}
